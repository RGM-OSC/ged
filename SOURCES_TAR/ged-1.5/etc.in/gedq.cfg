# **********************************************************************************************
#                                 - GEDQ configuration -
# **********************************************************************************************
#
# Copyright (C) 2007 Jérémie Bernard, Michaël Aubertin
#
# This package is free software; you can redistribute it and/or modify it under the terms of the 
# GNU General Public License as published by the Free Software Foundation; either version 2 of 
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this software; 
# if not, write to :
# Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
# **********************************************************************************************

#-----------------------------------------------------------------------------------------------
# distant socket connection [mandatory] and local binding specification [optional]
#-----------------------------------------------------------------------------------------------
# syntax :
#
#  connect [address]:port | socket 
#  bind    [address]
#  -> specifies the listener gedq should connect to, default to loopback if not specified and 
#     setting a port number rather than a local socket file (see ged.cfg)
#     optional bind parameter forces gedq to use the specified source interface

;connect		:2403
connect			/srv/eyesofnetwork/ged/var/cache/ged.sock
bind			

#-----------------------------------------------------------------------------------------------
# sender request http proxy passthru [optional]
#-----------------------------------------------------------------------------------------------
# syntax :
#
# http_proxy [address:port]
#  -> specifies the http proxy the client should passthru to access its target which is 
#     specified above by the "bind" parameter
#
# http_proxy_auth [none|basic|ntlm]
#  -> specifies the http proxy authentification method to use when http_proxy is supplied, none
#     is default
#
# http_proxy_user login
#  -> specifies the supplied user login when authenticating to the given http_proxy i.e.
#     when http_proxy_auth differs from "none"; if so, SSL connection is implemented only
#
# http_proxy_pass nohash
#  -> specifies the supplied user password when authenticating to the given http_proxy i.e.
#     when http_proxy_auth differs from "none"; if so, SSL connection is implemented only

http_proxy
http_proxy_auth
http_proxy_user
http_proxy_pass

#-----------------------------------------------------------------------------------------------
# sender request http encapsulation [mandatory]
#-----------------------------------------------------------------------------------------------
# syntax :
#
# http_command POST | GET
#  -> specifies the http command that should be filled in the sender http header
#
# http_version 1.0 | 1.1
#  -> specifies the http version that should be filled in the sender http header
#
# http_user_agent [chain]
#  -> if any, specifies the user-agent token that should be filled in the sender http header
#
# http_content_type image/jpeg | multipart/x-gzip [z_compression_level]
#  -> specifies the content type that should be filled in the sender http header; this field 
#     also defines the way the packets will be sended forward to the listener target while 
#     performing requests : if a compression mime type is used, the packets will be 
#     compressed before beeing sended; in such a case, you may specify the associated zlib 
#     compression level (1 through 9, 1 is faster, 9 is smaller, 6 is default)

http_command		POST
http_version		1.1
http_user_agent
http_content_type	multipart/x-gzip	9

#-----------------------------------------------------------------------------------------------
# client ack timeout [optional]
#-----------------------------------------------------------------------------------------------
# syntax :
#
# ack_timeout [seconds]
#  -> specifies the maximum time in seconds the client should wait for a request handling ack 
#     from its target (default is 5s)

ack_timeout		15

#-----------------------------------------------------------------------------------------------
# peek request max records number [optional]
#-----------------------------------------------------------------------------------------------
# syntax :
#
# peek_max_records [number]
#  -> specifies the maximum records a peek request will return avoiding huge display or pipe,
#     no restriction is applied if nothing specified or 0 (not recommanded)

peek_max_records	100

#-----------------------------------------------------------------------------------------------
# TLS connection [optional]
#-----------------------------------------------------------------------------------------------
# syntax : 
# 			!!! FULL PATH TO FILES SHOULD BE SPECIFIED !!!
#
# tls_ca_certificate [file]
#  -> specifies the file that contains certificates for all of the Certificate Authorities that
#     the listener recognizes
#
# tls_certificate [file]
#  -> specifies the file that contains the client certificate
#
# tls_certificate_key [file]
#  -> specifies the file that contains the client private key that matches the certificate 
#     stored in the tls_certificate file. The private key must not be protected with a password 
#     but the file access restricted if important
#
# tls_verify_peer true|false
#  -> specifies that the client should request and verify the listener certificate (default is
#     false)
#
# tls_cipher_suite [chain]
#  -> configures what ciphers will be accepted and the preference order; "chain" should be a 
#     cipher specification for OpenSSL (see openssl ciphers -v)
#       ex: tls_cipher_suite HIGH:MEDIUM:+SSLv2

tls_ca_certificate
tls_certificate
tls_certificate_key

tls_verify_peer
tls_cipher_suite

#-----------------------------------------------------------------------------------------------
# gedq tunnel command pulse timer (when using the -tun switch only) [optional]
#-----------------------------------------------------------------------------------------------
# syntax :
#
# keep_alive [seconds]
#  -> the gedq tunnel connection is always persistent (>0) i.e. the sended http headers define 
#     a keep-alive content. In order to maintain the tunnel, gedq sends a heartbeating to the 
#     dedicated target at least every given "seconds" trying to keep the connection alive; 
#     when defining a persistent connection, the target will check the connection state every 
#     given seconds adding the local ack_timeout value; if unspecified, default is to handle 
#     persistent connections with heartbeating set to 30 seconds

keep_alive		60

#-----------------------------------------------------------------------------------------------
# packet types handling [mandatory]
#-----------------------------------------------------------------------------------------------
include			/srv/eyesofnetwork/ged/etc/gedp.cfg



