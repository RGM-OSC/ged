# **********************************************************************************************
#                                 - GED configuration -
# **********************************************************************************************
#
# Copyright (C) 2007 Jérémie Bernard, Michaël Aubertin
#
# This package is free software; you can redistribute it and/or modify it under the terms of the 
# GNU General Public License as published by the Free Software Foundation; either version 2 of 
# the License, or (at your option) any later version.
#
# This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this software; 
# if not, write to :
# Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
# **********************************************************************************************

#-----------------------------------------------------------------------------------------------
# syslog facility and log level [optional]
#-----------------------------------------------------------------------------------------------
# syntax :
#
# syslog_local [local]
#  -> specifies the log facility that should be associated to the ged logs; so you may 
#    personalize your log direction using the syslog conf directives and the associated 
#    logrotates; "local" may be specified from 0 through 7 to map local0.* through local7.*
#    if undefined all logs are written to standard stdout(1) and stderr(2) output
#
# syslog_level [level]
#  -> specifies the desired log level and may be defined with the following OR bits :
#	 0: none
#	 1: connection / disconnection (default)
#	 2: connection details (md5, ack, pulse, sync...)
#	 4: ged packet header (version, request, timestamp, type...)
#	 8: ged packet content (specific packet public data content)
#	16: backend operation (ttl, peek, push, drop...)
#	32: http header (http header chain)
#	64: ssl trace (handshake, certificate content...)
#      128: debug purpose, __GED_DEBUG_XXX__ preprocessors required (SEM, SQL)
#
# syslog_history_local [local]
#  -> specifies the log facility that should be associated to the ged history logs; so you may 
#     personalize your log direction using the syslog conf directives and the associated 
#     logrotates; "local" may be specified from 0 through 7 to map local0.* through local7.*
#     if undefined, history logs are discarded; ged writes to history logs when an history 
#     record is definitively removed from ged's backend either by an explicit drop either when 
#     ttl threshold is reached


syslog_local		6
syslog_level		0

syslog_history_local	

#-----------------------------------------------------------------------------------------------
# process uid / gid to switch to (when started as root) [recommanded]
#-----------------------------------------------------------------------------------------------

uid			nobody
gid			nobody

#-----------------------------------------------------------------------------------------------
# local socket binding [mandatory]
#-----------------------------------------------------------------------------------------------
# syntax :
#
#  listen [address]:port | socket
# [listen [address]:port | socket]*
#  -> specifies the interfaces ged should listen on (defaults to all) or the socket file to use
#     for local gedq bindings

listen			/srv/eyesofnetwork/ged/var/cache/ged.sock
listen			:2403

#-----------------------------------------------------------------------------------------------
# fifo input [optional] !!! FIFO IS BETA SECTION !!!
#-----------------------------------------------------------------------------------------------
# syntax :
#
#  fifo file fs rs
#  -> specifies a fifo input file that ged waits IO from added to the previous sockets input (if 
#     using this facility, keep in mind the atomicity of pipe IO per process : PIPE_BUF max 
#     buffer specified in sys/stat.h); fs specifies an hexadecimal character code to be used as 
#     fields separator; rs specifies an hexadecimal character code to be used as records 
#     separator; only push is allowed with fifo facility
#
#  -> sample fifo push :
#  trap "" SIGPIPE; GED_FS='\t'; GED_RS='\n'; pkt_type="4"; for i in `seq 1 100`; 
#  do echo -ne "${pkt_type}${GED_FS}service ${i}${GED_FS}${i}${GED_FS}comment ${i}${GED_RS}" > 
#  /var/cache/ged/ged.fifo; done

;fifo                   /var/cache/ged/ged.fifo         0x09 0x0a

#-----------------------------------------------------------------------------------------------
# listener ack timeout [optional]
#-----------------------------------------------------------------------------------------------
# syntax :
#
# ack_timeout [seconds]
#  -> specifies the maximum time in seconds the listener should wait for a data reception ack 
#     from its sources while performing reverse synchronizations (default is 5s)

ack_timeout		15

#-----------------------------------------------------------------------------------------------
# listener http encapsulation [mandatory]
#-----------------------------------------------------------------------------------------------
# syntax :
#
# http_version 1.0 | 1.1
#  -> specifies the http version that should be filled in the listener http header while 
#     performing reverse emission
#
# http_server chain
#  -> specifies the server token that should be filled in the listener http header while
#     performing reverse emission
#
# http_content_type image/jpeg | multipart/x-gzip [z_compression_level]
#  -> specifies the content type that should be filled in the listener header while performing
#     reverse emission; this field also defines the way the packets will be sended backward to 
#     the listener sources while performing synchronizations : if a compression mime type is 
#     used, the packets will be compressed before beeing backwarded; in such a case, you may 
#     specify the associated zlib compression level (1 through 9, 1 is faster, 9 is smaller,
#     6 is default)

http_version		1.1
http_server		Generic Event Dispatcher/1.5.0 (GNU/Linux)
http_content_type	multipart/x-gzip	9

#-----------------------------------------------------------------------------------------------
# packets pool emission [optional]
#-----------------------------------------------------------------------------------------------
# syntax :
#
# packets_pool [number]
#  -> specifies the maximum packets number each http server answer will encapsulate while 
#     performing reverse synchronizations (default is 30)

packets_pool		30

#-----------------------------------------------------------------------------------------------
# TLS connection [optional]
#-----------------------------------------------------------------------------------------------
# syntax : 
# 			!!! FULL PATH TO FILES SHOULD BE SPECIFIED !!!
#
# tls_ca_certificate [file]
#  -> specifies the file that contains certificates for all of the Certificate Authorities that
#     the listener recognizes
#
# tls_certificate [file]
#  -> specifies the file that contains the listener certificate
#
# tls_certificate_key [file]
#  -> specifies the file that contains the listener private key that matches the certificate 
#     stored in the tls_certificate file. The private key must not be protected with a password 
#     but the file access restricted if important
#
# tls_verify_peer [true|false]
#  -> specifies that the listener should request and verify the sender certificate (default is
#     true)
#
# tls_dhparam [file]
#  ->  specifies the file that contains Diffie-Hellman ephemeral key exchange parameters; this is
#      required in order to use a DSA certificate on the server. 
#      see man dhparam(1) and use openssl dhparam 512/1024/2048/4096 (it is strongly recommended 
#      to regenerate the default provided dhparam files)
#
# tls_cipher_suite [chain]
#  -> configures what ciphers will be accepted and the preference order; "chain" should be a 
#     cipher specification for OpenSSL (see openssl ciphers -v)
#       ex: tls_cipher_suite HIGH:MEDIUM:+SSLv2

tls_ca_certificate
tls_certificate
tls_certificate_key
tls_verify_peer

tls_dhparam
tls_cipher_suite

#-----------------------------------------------------------------------------------------------
# allowed sync sources [optional]
#-----------------------------------------------------------------------------------------------
# syntax :
#
#  allow_sync_from [address]
# [allow_sync_from  address]*
# -> the given addesses or ranges will be authorized to contact the present listener (defaults 
#    to full authorization if nothing is specified); the address may be partially specified such 
#    as 192.168. (without meta). This parameter restricts ged sources synchronisation.

allow_sync_from

#-----------------------------------------------------------------------------------------------
# allowed request sources [optinal]
#-----------------------------------------------------------------------------------------------
# syntax :
#
#  allow_request_from  address
# [allow_request_from  address]*
# -> the given addesses or ranges will be authorized to fully request the present listener (only
#    specified requester will have the full access, other requesters will have only private 
#    reading access until explicitly specified; the address may be partially specified such as 
#    192.168. (without meta); if empty, local bindings only will be fully authorized

allow_request_from

#-----------------------------------------------------------------------------------------------
# connections input number restriction [optional]
#-----------------------------------------------------------------------------------------------
# syntax :
#
#  max_conn_in [number]
#  -> specifies how many connections input the present listener may simultaneously handle, 
#     including gedq client connections and potential ged sources synchronisation; if 
#     unspecified or 0, no restriction is applied

max_conn_in

#-----------------------------------------------------------------------------------------------
# data tunneling activation [optional]
#-----------------------------------------------------------------------------------------------
# syntax :
#
#  enable_tun [true|false]
#  -> if enabled, ged might act as a data wire from a gedq transmitter; the data tunneling mode 
#     access is disabled until explictly set to true

;enable_tun

#-----------------------------------------------------------------------------------------------
# allowed tun sources [mandatory when enable_tun]
#-----------------------------------------------------------------------------------------------
# syntax :
#
#  allow_tun_from [address]
# [allow_tun_from  address]*
# -> this parameter is used only when enable_tun is activated; the given addesses or ranges will 
#    be authorized to request the present listener for data tunneling; an unlisted source will 
#    not be able to open a tunnel until specified here

;allow_tun_from

#-----------------------------------------------------------------------------------------------
# tun allowed destination [optional when enable_tun]
#-----------------------------------------------------------------------------------------------
# syntax :
#
#  allow_tun_to [address]
#  [allow_tun_to address]*
#  -> this parameter is used only when enable_tun is activated; if specified, the given 
#     addresses or ranges through a tun will be authorized only; defaults to full authorization 
#     if nothing is specified; the address may be partially specified such as 192.168. (without 
#     meta)

;allow_tun_to

#-----------------------------------------------------------------------------------------------
# data tunneling output number restriction [optional when enable_tun]
#-----------------------------------------------------------------------------------------------
# syntax :
#
#  max_tun_conn_out [number]
#  -> this parameter is used only when enable_tun is activated; it specifies the maximum number 
#     of connections a tun may handle simultaneously i.e. the number of clients that may connect 
#     simultaneously to a dedicated target through the tunnel; if unspecified or 0, no 
#     restriction is applied

;max_tun_conn_out

#-----------------------------------------------------------------------------------------------
# listener backend module [mandatory]
#-----------------------------------------------------------------------------------------------
;include /srv/eyesofnetwork/ged/etc/bkd/geddummy.cfg
;include /srv/eyesofnetwork/ged/etc/bkd/gedhdb.cfg
include /srv/eyesofnetwork/ged/etc/bkd/gedmysql.cfg

#-----------------------------------------------------------------------------------------------
# packet types handling [mandatory]
#-----------------------------------------------------------------------------------------------
include /srv/eyesofnetwork/ged/etc/gedp.cfg

#-----------------------------------------------------------------------------------------------
# target(s) to relay events to [optional]
#-----------------------------------------------------------------------------------------------
;include /srv/eyesofnetwork/ged/etc/gedt.cfg




